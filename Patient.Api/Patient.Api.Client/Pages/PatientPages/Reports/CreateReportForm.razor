@layout Patient.Api.Client.Layout.UserLayout

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@using Patient.Api.Client.Services
@using Shared.AdditionalClasses
@using Shared.Constants
@using Blazored.Typeahead
@using MudBlazor



@inject UserApiService _userApiService
@inject NavigationManager _navigationManager


@page "/pacjent/dodaj-raport"

<div class="container px-4">
    <div class="row pt-5 mb-4">
        <div class="col justify-content-start align-content-start">
            <NavLink href="/pacjent/raporty">
                <btn type="button" class="back-icon bi-arrow-left"></btn>
            </NavLink>
        </div>
        <div class="col">
            <h2 class="text-center">Dodaj raport</h2>
        </div>
    </div>

    <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
        <EditForm method="post" Model="@report" FormName="CreateReport" Enhance>
            <section class="mt-4 mb-4">
                <h4>Data: @DateOnly.FromDateTime(DateTime.Today)</h4>
                <div class="row d-flex mt-4 mb-4">
                    <div class="col-4">
                        <p>Określ swoje samopoczucie </p>
                    </div>
                    <div class="col">
                        <MudSlider TickMarks="true" Step="10" Value="@report.PatientsHealthRating" />
                    </div>
                </div>
            </section>
            <section class="mb-4">
                <div class="row pt-5">
                    <h3>Pytania</h3>
                </div>
                @for (int i = 0; i < questionList.Count(); i++)
                {
                    <div class="list-group-item" id="@answerItems[i].Id">
                        <div class="row mt-4 mb-3">
                            <p>@questionList[i]</p>
                            <InputText type="text" @bind-Value="@answerItems[i].Answer" class="form-control" placeholder="Odpowiedz" />
                        </div>
                     </div>
                    
                }
                <div class="row">
                    <InputTextArea id="description" style="width: 100%; height: 70px; resize: none;"
                                   @bind-Value="report.Description" label="Dodatkowy Opis"
                                   class="form-control mb-4"></InputTextArea>
                </div>                
            </section>
            <section class="mt-5 mb-3">
                <div class="row">
                    <h4>Objawy</h4>
                    <p>Wymień objawy choroby (jeśli występują)</p>
                </div>
                <div class="row">
                    <div class="col-10">
                        <BlazoredTypeahead SearchMethod="SearchSymptomBySearchPhrase" @bind-Value="diseaseSymptom">
                            <SelectedTemplate Context="contextSymptom">
                                @contextSymptom
                            </SelectedTemplate>
                            <ResultTemplate Context="contextSymptom">
                                @contextSymptom
                            </ResultTemplate>
                        </BlazoredTypeahead>
                    </div>
                    <div class="col">
                        <btn type="button" class="btn btn-outline-primary btn-custom-outline" @onclick="AddSymptom">
                            Dodaj
                        </btn>
                    </div>
                </div>
                <div class="row d-flex mt-4 mb-4">
                    @foreach (var item in report.PatientsSymptoms)
                    {
                        <span class="badge bg-primary badge-item-custom-erasable mr-2 mb-2" @onclick="()=>EraseSymptom(item)">@item</span>
                    }
                </div>
            </section>

            <section class="mt-5 mb-3">
                <div class="row">
                    <h4>Pliki</h4>
                    <p>Wgraj pliki (np. zdjęcia zmian skórnych lub innych jeśli chcesz)</p>
                </div>
                <div class="row">
                    <div>
                        <InputFile OnChange="HandleFileSelected" multiple id="File" class="form-control"></InputFile>
                    </div>
                </div>
                <div class="row">
                    @if (filesPreview.Count > 0)
                    {
                        <div class="d-flex pt-5">
                            @foreach (var file in filesPreview)
                            {
                                <div>
                                    <div class="file-block mx-2">
                                        <div @onclick="() => HandleEraseFile(file)" class="bi-x-circle"></div>
                                        <div class="bi-file-icon"></div>
                                        <p class="font-10px text-center">@file.Name</p>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            </section>
            <section>
                <div class="row">
                    <btn type="button" class="btn btn-primary btn-custom-primary" @onclick="HandleAddReport">
                        Dodaj Raport
                    </btn>
                </div>
            </section>
        </EditForm>
    </MudPaper>
</div>

@code {
    private ReportDtoFront report = new();
    private List<Stream> files = new();
    private List<string> filePreviewUrls = new List<string>();
    private List<IBrowserFile> filesPreview = new ();
    private List<string> fileNames = new();

    //private string filePreviewUrl;
    private int maxAllowedSize = 10 * 1024 * 1024;

    private bool isReportBeingAdded = false;
    private bool reportAddedSuccesfully;
    private bool reportAddingFailed;

    //
    private List<string> symptomTypes = new();

    private string diseaseSymptom = "";



    private List<string> questionList = new();
    private List<AnswerItem> answerItems = new();
    private List<string> answearsList = new();


    protected async override Task OnInitializedAsync()
    {
        symptomTypes = DiseaseSymptom.GetAllSymptoms();
        questionList = QuestionsForReport.GetAllQuestions();
        MakeAnswearElements(questionList.Count());
        StateHasChanged();
    }


    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var currentGivenFiles = e.GetMultipleFiles();
        files = report.Files.ToList();

        if (currentGivenFiles.Count > 0)
        {
            foreach (var file in currentGivenFiles)
            {

                filesPreview.Add(file);

            }
        }
    }
    private async void HandleEraseFile(IBrowserFile file)
    {
        filesPreview.Remove(file);
    }

    private async void HandleAddReport()
    {

        if (isReportBeingAdded)
            return;

        reportAddingFailed = false;
        reportAddedSuccesfully = false;
        isReportBeingAdded = true;
        StateHasChanged();
        //
        MakeFileStreams();
        GetPatientsAnswers();
        var response = await _userApiService.SendAddReportRequest(report);
        if(response.IsSuccessStatusCode)
        {
            isReportBeingAdded = false;
            reportAddedSuccesfully = true;

            StateHasChanged();
            _navigationManager.NavigateTo("/pacjent/raporty");

        }
        else
        {
            isReportBeingAdded = false;
            reportAddingFailed = true;
            StateHasChanged();
            _navigationManager.NavigateTo("/pacjent/raporty");
            //no i tu tez powinno byc inaczej - ze po prostu jest kontrola danych wprowadzanych do tego.
            //a nie jak request zwroci
        }
    }

    private async void MakeFileStreams()
    {
        files.Clear();
        fileNames.Clear();
        foreach (var file in filesPreview)
        {
            fileNames.Add(file.Name);
            var stream = file.OpenReadStream(maxAllowedSize);
            files.Add(stream);
        }
        report.Files = files;
        report.FileNames = fileNames;
    }
    private void AddSymptom()
    {
        report.PatientsSymptoms.Add(diseaseSymptom);
    }

    private void EraseSymptom(string item)
    {
        report.PatientsSymptoms.Remove(item);
    }

    private async Task<IEnumerable<string>> SearchSymptomBySearchPhrase(string searchPhrase)
    {
        if (string.IsNullOrWhiteSpace(searchPhrase))
        {
            return new List<string>();
        }
        var result = symptomTypes
            .Where(symptom => symptom.Contains(searchPhrase, StringComparison.OrdinalIgnoreCase))
            .ToList();

        return await Task.FromResult(result);
    }
    private async void AddAnswer(string answear)
    {

    }
    private async void MakeAnswearElements(int questionsNumber)
    {
        answerItems.Clear();
        for (int i = 0; i < questionsNumber; i++)
        {
            answerItems.Add(new AnswerItem
                {
                    Id = i + 1,
                    Answer = string.Empty
                });
        }
    }

    private async void GetPatientsAnswers()
    {
        foreach(var item in answerItems)
        {
            report.PatientsAnswers.Add(item.Answer);
        }
    }
    //Additional
    private class AnswerItem()
    {
        public int Id { get; set; }
        public string Answer { get; set; } = "";
    }
}
