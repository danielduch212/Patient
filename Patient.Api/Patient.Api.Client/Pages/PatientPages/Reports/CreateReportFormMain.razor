@layout Patient.Api.Client.Layout.UserLayout

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@using Patient.Api.Client.Services
@using Shared.AdditionalClasses
@using Shared.Constants
@using Blazored.Typeahead
@using MudBlazor



@page "/pacjent/dodaj-raport"

<div class="container px-4 position-relative" >
    <div class="row pt-5 mb-4">    
        <h2 class="text-center" style="color: white;">Nowy raport            Data: @DateOnly.FromDateTime(DateTime.Today)</h2>
        <div class="col">
            <div class="col justify-content-start align-content-start">
                @if (!showNextForm)
                {
                    <NavLink href="/pacjent/raporty">
                        <btn type="button" class="back-icon bi-arrow-left" style="color: rgb(215, 238, 145);"></btn>
                    </NavLink>
                }            
            </div>
        </div>
        <div class="col-10 d-flex justify-content-center align-content-center ">
            <img src="/images/ReportFormImage.png" style="max-width: 700px; background-color: none;" />
        </div>
        <div class="col">

        </div>
    </div>   
    
    
    @if (!showNextForm)
    {
        <div class="container d-flex justify-content-center" style="max-width: 80%;">
            <EditForm method="post" EditContext="editContext" FormName="CreateReport" OnValidSubmit="HandleShowNextForm" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3">
                    <Patient.Api.Client.Layout.ManageComponents.StatusMessage Message="@errorMessageHealth" />
                    <section class="mt-4 mb-4">
                        <div class="row d-flex">
                            <div class="col-4 d-flex justify-content-center align-content-center">
                                <img src="/images/Reports/heartMeassureIcon.png" style="max-width: 200px;" />
                            </div>
                            <div class="col justify-content-center">
                                <h3 class="py-5">Określ swoje samopoczucie </h3>
                                <MudSlider TickMarkLabels="@sliderLabels" Max="10" TickMarks="true" Step="1" @bind-Value="@report.PatientsHealthRating" />
                            </div>
                        </div>
                    </section>
                </MudPaper>

                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3">
                    <section class="mb-4">
                        <div class="row pt-5">
                            <Patient.Api.Client.Layout.ManageComponents.StatusMessage Message="@errorMessageQuestions" />
                            <div class="col-4 d-flex justify-content-center">
                                <img src="/images/Reports/questionsIcon.png" style="max-width: 200px; max-height: 200px;" />
                            </div>
                            <div class="col">
                                <h3>Pytania</h3>
                                <div class="list-group pt-5 px-5">
                                    @foreach (var item in answerItems)
                                    {
                                        <div class="list-group-item" @key="item.Id">
                                            <div class="row mt-4 mb-3 justify-content-center text-center">
                                                <h5 class="text-start">@questionList[item.Id]</h5>
                                                <InputTextArea id="@item.Id" style="width: 80%; height: 30px; resize: none;"
                                                @bind-Value="@item.Answer" class="form-control no-border-input" placeholder="Odpowiedz" />
                                                
                                                <ValidationMessage For="@(() => item.Answer)" />
                                            </div>
                                        </div>
                                    }
                                    <div class="list-group-item">
                                        <h5>Dodatkowe informacje (jeśli chcesz coś przekazać)</h5>
                                        <InputTextArea id="description" style="width: 80%; height: 30px; resize: none;"
                                                       @bind-Value="report.Description" label="Dodatkowy Opis"
                                                       class="form-control mb-4"></InputTextArea>
                                    </div>
                                </div>

                                
                            </div>
                        </div>

                    </section>
                </MudPaper>
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3">
                    <section>
                        <div class="row pb-5">
                            <div class="col">
                            </div>
                            <div class="col text-end">
                                <button type="submit" class="back-icon bi-arrow-right"></button>
                            </div>
                        </div>
                    </section>
                </MudPaper>       
            </EditForm>
        </div>
    }
    else
    {
        <CascadingValue Value="report">
            <Patient.Api.Client.Pages.PatientPages.Reports.ReportForms.ReportForm2 OnPrevious="HandleFormBack" />
        </CascadingValue>
    }
 </div>
   


@code {
    private ReportDtoFront report = new();

    private bool isReportBeingAdded = false;
    private bool reportAddedSuccesfully;
    private bool reportAddingFailed;


    string[] sliderLabels = new string[] { "0","1", "2", "3", "4", "5", "6", "7", "8", "9", "10", };

    //
    private List<string> questionList = new();
    private List<AnswerItem> answerItems = new();
    private List<string> answearsList = new();

    //zmiana
    private bool showNextForm;

    //validation
    private EditContext editContext;
    private string? errorMessageHealth;
    private string? errorMessageQuestions;


    protected async override Task OnInitializedAsync()
    {
        questionList = QuestionsForReport.GetAllQuestions();
        MakeAnswearElements(questionList.Count());
        editContext = new EditContext(answerItems);
        StateHasChanged();
    }  

    private async void MakeAnswearElements(int questionsNumber)
    {
        answerItems.Clear();
        for (int i = 0; i < questionsNumber; i++)
        {
            answerItems.Add(new AnswerItem
                {
                    Id = i,
                    Answer = string.Empty
                });
        }
    }

    private async void GetPatientsAnswers()
    {
        foreach (var item in answerItems)
        {
            report.PatientsAnswers.Add(item.Answer);
        }
    }

    private void HandleFormBack()
    {
        showNextForm = false;
        StateHasChanged();
    }

    private void HandleShowNextForm()
    {
        GetPatientsAnswers();
        if (report.PatientsHealthRating == 0)
        {
            errorMessageHealth = "Określ stan zdrowia";
            return;
        }
        errorMessageHealth = "";
        if (report.PatientsAnswers.Any(answer => string.IsNullOrEmpty(answer)))
        {
            errorMessageQuestions = "Wypełnij wymagane pola";
            return;
        }
        errorMessageQuestions = "";
        showNextForm = true;
        StateHasChanged();
    }


}
