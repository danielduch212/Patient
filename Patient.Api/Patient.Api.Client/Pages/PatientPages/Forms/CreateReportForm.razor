@layout Patient.Api.Client.Layout.UserLayout

@rendermode InteractiveWebAssembly


@using Patient.Api.Client.Services
@using Shared.AdditionalClasses

@inject UserApiService _userApiService

@page "/pacjent/dodaj-raport"



<div class="page-background">

    <div class="container px-4">
        <div class="row pt-5">
            <div class="col justify-content-start align-content-start">
                <NavLink href="/pacjent/raporty">
                    <btn type="button" class="back-icon bi-arrow-left"></btn>
                </NavLink>
                
            </div>
            <div class="col">
                <h2 class="text-center">Dodaj raport</h2>
            </div>
            <div class="col">

            </div>
        </div>
    </div>

    <div class="container px-4">
        
        <EditForm method="post" Model="@report" FormName="CreateReport" Enhance>
            <div class="row pt-5">
                <div class="col-4 d-flex d-flex-column justify-content-center align-content-center align-items-center">

                    <h3>Opis</h3>

                </div>
                <div class="col-8 d-flex d-flex-column">
                    <div>

                        <InputTextArea id="description" style="width: 100%; height: 400px; resize: none;" @bind-Value="report.Description" class="form-control"></InputTextArea>

                    </div>
                    
                </div>

            </div>
            <div class="row pt-5">
                <div class="col-4 d-flex d-flex-column justify-content-center align-content-center align-items-center">

                    <h3>Pliki</h3>

                </div>  
                <div class="col-8 d-flex d-flex-column">
                    <div>

                        <InputFile OnChange="HandleFileSelected" multiple id="File" class="form-control"></InputFile>

                    </div>
                    @if (filesPreview.Count > 0)
                    {
                        <div class="d-flex d-flex-row pt-5">

                            @foreach (var file in filesPreview)
                            {
                                <div>
                                    <div class="file-block mx-2">
                                        <div @onclick="() => HandleEraseFile(file)" class="bi-x-circle"></div>
                                        <div class="bi-file-icon"></div>
                                        <p class="font-10px text-center">@file.Name</p>
                                    </div>

                                </div>
                                

                            }

                        </div>

                        
                    }
                </div>

            </div>
            <div class="row pt-5">
                <div class="d-flex d-flex-column justify-content-center align-items-center" >
                    <btn type="button" id="BtnAddReport" @onclick="HandleAddReport" style="width: 200px;" class="btn btn-primary">Dodaj raport</btn>
                </div>
            </div>
            <div class="d-flex d-flex-column align-items-center justify-content-center pt-3">
                @if (isReportBeingAdded == true)
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>

                    </div>

                }
                @if (reportAddedSuccesfully==true)
                {
                    <div class="alert alert-success" role="alert">
                        Raport dodany pomyślnie
                    </div>
                }
                @if (reportAddingFailed==true)
                {
                    <div class="alert alert-warning" role="alert">
                        Nie udalo sie dodac raportu
                    </div>
                }
            </div>
        </EditForm>
        
    </div>

</div>

@code {

    private ReportDtoFront report = new();
    private List<Stream> files = new();
    private List<string> filePreviewUrls = new List<string>();
    private List<IBrowserFile> filesPreview = new ();
    private List<string> fileNames = new();

    //private string filePreviewUrl;
    private int maxAllowedSize = 10 * 1024 * 1024;

    private bool isReportBeingAdded = false;
    private bool reportAddedSuccesfully;
    private bool reportAddingFailed;

    private async void HandleFileSelected(InputFileChangeEventArgs e)
    {
        var currentGivenFiles = e.GetMultipleFiles();
        files = report.Files.ToList();

        if (currentGivenFiles.Count > 0)
        {
            foreach (var file in currentGivenFiles)
            {

                filesPreview.Add(file);

            }
        }
    }
    private async void HandleEraseFile(IBrowserFile file)
    {
        filesPreview.Remove(file);
    }

    private async void HandleAddReport()
    {

        if (isReportBeingAdded)
            return;

        reportAddingFailed = false;
        reportAddedSuccesfully = false;
        isReportBeingAdded = true;
        //
        MakeFileStreams();
        var response = await _userApiService.SendAddReportRequest(report);
        if(response.IsSuccessStatusCode)
        {
            isReportBeingAdded = false;
            reportAddedSuccesfully = true;
            StateHasChanged();
        }
        else
        {
            isReportBeingAdded = false;
            reportAddingFailed = true;
            StateHasChanged();
        }


    }

    private async void MakeFileStreams()
    {
        files.Clear();
        fileNames.Clear();
        foreach (var file in filesPreview)
        {
            fileNames.Add(file.Name);
            var stream = file.OpenReadStream(maxAllowedSize);
            files.Add(stream);


        }
        report.Files = files;
        report.FileNames = fileNames;
    }

}
