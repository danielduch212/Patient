@layout Patient.Api.Client.Layout.MyAccount.PatientAccountLayout

@rendermode @(new InteractiveWebAssemblyRenderMode(false))

@page "/pacjent/wywiad"

@using MudBlazor
@using Shared.Dtos
@using Patient.Api.Client.Services

@inject UserApiService _userApiService



<div class="container px-4">
    @if (!changeData)
    {       
        <section>
            <h3>Wywiad Medyczny</h3>
            @if (readingDiseases)
            {
                <MudBlazor.MudProgressCircular Color="Color.Primary" Indeterminate="true"></MudBlazor.MudProgressCircular>

            }
            else
            {
                <div class="row text-center">
                    <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">                    
                        <CascadingValue Value="patientsDiseasesDtos">
                            <Patient.Api.Client.Pages.PatientPages.MedicalInterview.AdditionalComponents.ShowPatientsDiseasesComponent  />
                        </CascadingValue>
                    </MudPaper>
                </div>
            }
            
        </section>
        <section>
            <div class="row">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                    <btn type="button" class="btn btn-primary btn-custom-primary" @onclick="ShowChangeDataComponent">
                        Zmień dane
                    </btn>
                </MudPaper>
            </div>          
        </section>
    }
    else
    {
        <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
            <h3>Wywiad Medyczny</h3>
            <Patient.Api.Client.Pages.PatientPages.MedicalInterview.ChangeMedicalInterwiew OnClose="HandleAddedDiseases" />
        </MudPaper>
        
    }
    
</div>

@code {
    private bool changeData;
    private bool readingDiseases;

    private List<PatientsDiseaseDto> patientsDiseasesDtos = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPatientsDiseases();
    }

    private async Task GetPatientsDiseases()
    {
        var response = await _userApiService.SendRequestGetPatientsDiseases();
        if (response.IsSuccessStatusCode)
        {
            patientsDiseasesDtos = await response.Content.ReadFromJsonAsync<List<PatientsDiseaseDto>>();

            await Task.Delay(2000);
            readingDiseases = false;
            StateHasChanged();

        }
    }

    private async Task ShowChangeDataComponent()
    {
        changeData = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void HandleAddedDiseases()
    {
        await GetPatientsDiseases();
        changeData = false;
        StateHasChanged();
    }
    
}
