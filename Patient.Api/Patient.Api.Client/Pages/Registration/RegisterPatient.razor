@using System.Diagnostics
@using System.Timers
@using Patient.Api.Client.AdditionalClasses
@using Shared.Identity

@inject NavigationManager Navigation
@inject Patient.Api.Client.Services.UserApiService userApiService 
@* @rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false)) *@
@rendermode InteractiveWebAssembly

@layout Layout.LoggingLayout
@page "/rejestracjapacjent"

<div class="container">
    <div class="row justify-content-center pt-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">Rejestracja</div>
                <div class="card-body">
                    <form>
                        <div class="form-group">
                            <label for="name">Imię</label>
                            <input type="text" class="form-control" id="name" placeholder="Wprowadź imię" required @bind="registerData.Name">
                        </div>
                        <div class="form-group">
                            <label for="surname">Nazwisko</label>
                            <input type="text" class="form-control" id="surname" placeholder="Wprowadź nazwisko" required @bind="registerData.Surname">
                        </div>
                        <div class="form-group">
                            <label for="pesel">Pesel</label>
                            <input type="number" class="form-control" id="pesel" placeholder="Wprowadź numer pesel" required @bind="registerData.Pesel">
                        </div>
                        <div class="form-group">
                            <label for="email">Adres e-mail</label>
                            <input type="email" class="form-control" id="email" placeholder="Wprowadź adres e-mail" required @bind="registerData.Email">
                        </div>
                        <div class="form-group">
                            <label for="password">Hasło</label>
                            <input type="password" class="form-control" id="password" placeholder="Wprowadź hasło" required @bind="registerData.Password">
                        </div>
                        <div class="form-group">
                            <label for="confirmPassword">Potwierdź hasło</label>
                            <input type="password" class="form-control" id="confirmPassword" placeholder="Potwierdź hasło" required @bind="confirmPassword">
                        </div>
                        <div class="text-center">
                            <button @onclick="OnRegister" type="button" class="btn btn-primary mt-4">Zarejestruj się</button>
                        </div>
                        @if (waitingForResult != false)
                        {
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        }
                        

                    </form>
                </div>

            </div>
            @if (successfullRegistration == false && isRequestSent==true)
            {
                <div class="alert alert-info" role="alert">
                    Nieprawidlowa rejestracja
                    @foreach (var error in registrationResult.Errors)
                    {
                        <div class="alert alert-info">
                            @error
                        </div>
                    }
                
            </div>
            }
            @if (successfullRegistration == true && isRequestSent==true)
            {
            <div class="alert alert-success" role="alert">
            Rejestracja przebiegla pomyslnie!
            </div>

            }

        </div>
    </div>
</div>

    






@code {
    private Shared.Identity.RegisterUserData registerData = new Shared.Identity.RegisterUserData();
    private string confirmPassword;
    private IdentityOperationResult registrationResult = new IdentityOperationResult();
    private bool successfullRegistration;
    private bool isRequestSent;
    private bool waitingForResult;

    private async Task OnRegister()
    {
        if (registerData.Password   != confirmPassword)
        {
            return;
        }
        waitingForResult = true;
        registerData.Username = registerData.Email;
        registrationResult = await userApiService.SendRegisterRequest(registerData);
        isRequestSent = true;
        if (registrationResult.IsSuccess == true)
        {
            waitingForResult = false;
            successfullRegistration =true;
            StateHasChanged();
            await Task.Delay(3000);
            Navigation.NavigateTo("/logowaniePacjent");
        }
        else
        {
            waitingForResult = false;
            successfullRegistration = false;
            StateHasChanged();
        }

    }

    
}
