@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities;
@using Patient.Domain.Entities.DTOs.Prescription



@inject IPatientApiService _patientApiService
@inject NavigationManager _navigationManager




<div class="container">
    <h4>Twoje recepty</h4>
    <div class="list-group pt-5">
        @if (readingPrescriptions)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true">

            </MudProgressCircular>
        }
        @if (filesGet)
        {
            foreach (var prescription in prescriptionsToShow)
            {
                <button type="button" @onclick="() => HandleShowPrescription(prescription)" class="list-group-item list-group-item-action">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <small class="text-muted">Data wystawienia</small>
                            <h5 class="mb-1">@prescription.DateOfIssue</h5>
                        </div>
                        <div>
                            <small class="text-muted">Liczba leków</small>
                            <h5 class="mb-1">@prescription.MedicineNames.Count()</h5>
                        </div>
                        
                    </div>
                </button>
            }
        }
        else
        {
            <div>
                Brak recept do wyswietlenia
            </div>
        }

    </div>
</div>
@if (showPrescriptionPreviewModal)
{
    <CascadingValue Value="prescriptionPreviewData">
        <PrescriptionPreviewModal OnClose="HandleClosePrescriptionPreviewModal" SourceToken="SourceToken"/>
    </CascadingValue>
}

@code {
    [CascadingParameter]
    public Patient.Domain.Entities.Actors.Patient CurrentPatient { get; set; } = new();

    [Parameter]
    public CancellationTokenSource SourceToken { get; set; }

    private List<PrescriptionToShowPatientDto> prescriptionsToShow = new();
    private bool filesGet;
    private bool readingPrescriptions;

    private bool showPrescriptionPreviewModal;

    //cascading 
    private PrescriptionPreviewData prescriptionPreviewData = new();

    protected async override Task OnInitializedAsync()
    {
        readingPrescriptions = true;
        prescriptionsToShow = await _patientApiService.GetPrescriptions(SourceToken.Token);
        if (prescriptionsToShow.Count > 0) { filesGet = true; }
        StateHasChanged();
        readingPrescriptions = false;

    }

    private void HandleShowPrescription(PrescriptionToShowPatientDto prescription)
    {
        prescriptionPreviewData.CurrentPatient = CurrentPatient;
        prescriptionPreviewData.CurrentPrescription = prescription;
        showPrescriptionPreviewModal = true;

    }

    private void HandleClosePrescriptionPreviewModal()
    {
        showPrescriptionPreviewModal = false;
        StateHasChanged();
    }


    //additionalClasses
    public class PrescriptionPreviewData
    {
        public PrescriptionToShowPatientDto CurrentPrescription = new();
        public Patient.Domain.Entities.Actors.Patient CurrentPatient = new();

    }
}
