@using static Patient.Api.Components.Pages.PatientPages.Prescription.AdditionalComponents.PatientsPrescriptionsComponent
@using Patient.Domain.Repositories
@using Patient.Domain.Entities
@using Patient.Domain.Entities.DTOs.Prescription

@inject IPrescriptionRepository _prescriptionRepository
@inject IDoctorsRepository _doctorsRepository


<div class="modal-backdrop">
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Recepta</h5>              
            </div>
            <div class="modal-body">
                @if (loading)
                {
                    <div class="row text-center">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"></MudProgressCircular>
                    </div>
                }
                else
                {
                    <div class="container">
                        <div class="row">
                            <div class="col text-start">
                                <strong>Data wystawienia: @prescription.DateOfIssue</strong>
                            </div>
                            <div class="col text-start">
                                <strong>Data ważności: @prescription.DateOfExpiration</strong>
                            </div>
                            <strong class="text-start pb-5">Kod recepty: 3214</strong>
                                                     
                        </div>
                        <div class="row">
                            <div class="col text-start">
                                <small style="display: block;">Lekarz wystawiający</small>
                                <strong>@prescription.DoctorName</strong>
                                <strong>@prescription.DoctorSurname</strong>
                                @* <small>@prescription.DoctorNumber</small> *@
                            </div>
                            <div class="col text-start">
                                <small style="display: block;">Dane pacjenta</small>                               
                                <strong>@PrescriptionData.CurrentPatient.Name</strong>
                                <strong>@PrescriptionData.CurrentPatient.Surname</strong>
                                <small style="display: block;">Pesel</small>
                                <strong style="display: block;">@PrescriptionData.CurrentPatient.Pesel</strong>
                            </div>
                        </div>
                        <div class="row text-start">
                            <strong>Leki</strong>
                            @foreach(var medicineName in prescription.MedicineNames)
                            {
                                <small>@medicineName</small>
                            }
                            
                        </div>
                        <div class="row">
                            <strong>Opis dawkowania</strong>
                            <strong>@prescription.Description</strong>
                        </div>                    
                    </div>
                }               
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline-primary btn-custom-outline" @onclick="CloseModal">Zamknij</button>

            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    PrescriptionPreviewData PrescriptionData { get; set; } = new();

    [Parameter]
    public EventCallback OnClose { get; set; }
    [Parameter]
    public CancellationTokenSource SourceToken { get; set; } 

    private bool loading;
    PrescriptionToShowPatientDto prescription = new();


    protected override async Task OnInitializedAsync()
    {
        loading = true;
        prescription = PrescriptionData.CurrentPrescription;
        await Task.Delay(100);
        loading = false;
        StateHasChanged();
    }


    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }
}
