@layout Patient.Api.Client.Layout.UserLayout
@rendermode @(new InteractiveServerRenderMode(false))
@page "/pacjent/recepty"


@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities;
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Application.Users

@inject IDiseaseRepository _diseaseRepository
@inject IPatientApiService _patientApiService
@inject NavigationManager _navigationManager
@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject IPrescriptionRequestRepository _prescriptionRequestRepository
@inject IUserContext userContext

@implements IDisposable


<div class="container px-4 position-relative">
    @if (showReminder)
    {
        <section>
            <Patient.Api.Components.ManageComponents.FullfillMedicalInterviewReminderComponent/>
        </section>
    }
    else
    {
        <section>
            <div class="row text-center">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                    <h3></h3>
                    <btn type="button" class="btn btn-primary btn-custom-primary" @onclick="ShowAskForPrescriptionModal">
                        Poproś o recepte
                    </btn>
                </MudPaper>
            </div>
        </section>
        <section>
            <div class="row">
                @if (mainComponentInitialized)
                {
                    <div class="col">
                        <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                            <CascadingValue Value="currentPatient">
                                <Patient.Api.Components.Pages.PatientPages.Prescription.AdditionalComponents.PatientsPrescriptionsComponent SourceToken="sourceToken" />
                            </CascadingValue>
                        </MudPaper>
                    </div>
                    <div class="col">
                        <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                            <h3>Twoje prosby o recepty</h3>
                            <h3>@prescriptionRequestsNumber</h3>
                        </MudPaper>
                    </div>
                }
                else
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
            </div>
        </section>
    }
    
    @if (showAskForPrescriptionModal)
    {
        <Patient.Api.Components.Pages.PatientPages.Prescription.AdditionalComponents.AskForPrescriptionModal OnClose="CloseAskForPrescriptionModal" SourceToken="sourceToken"/>
    }
</div>


@code {
    CancellationTokenSource sourceToken = new();

    private bool showAskForPrescriptionModal;

    private Patient.Domain.Entities.Actors.Patient currentPatient = new();
    private int prescriptionRequestsNumber;


    //dla zablokowania okna
    private bool showReminder;
    private bool mainComponentInitialized;

    protected override async Task OnInitializedAsync()
    {   
        await Task.Delay(500);
        await CountUserPrescriptionRequests();

        if ((await _diseaseRepository.CountPatientsCurrentDiseases(currentPatient.Id, sourceToken.Token) == 0) && (currentPatient.PreventionPatient==false))
        {
            showReminder = true;
        }
        mainComponentInitialized = true;
        StateHasChanged();
    }

    private void ShowAskForPrescriptionModal()
    {
        showAskForPrescriptionModal = true;
        StateHasChanged();
    }

    private async void CloseAskForPrescriptionModal()
    {
        await CountUserPrescriptionRequests();
        showAskForPrescriptionModal = false;
        StateHasChanged();
    }
    private async Task CountUserPrescriptionRequests()
    {
        var currentUser = await userContext.GetCurrentUserAsync();
        currentPatient = await _patientManager.FindByIdAsync(currentUser.Id);
        await Task.Delay(100);
        prescriptionRequestsNumber = await _prescriptionRequestRepository.CountPatientsPrescriptions(currentPatient.Id, sourceToken.Token);
        StateHasChanged();
    }


    public void Dispose()
    {
        sourceToken.Cancel();
        sourceToken.Dispose();
    }
}
