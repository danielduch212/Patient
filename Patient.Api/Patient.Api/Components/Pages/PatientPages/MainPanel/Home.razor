@layout Patient.Api.Client.Layout.UserLayout
@rendermode @(new InteractiveServerRenderMode(false))
@page "/pacjent"
@attribute [Authorize(Roles = UserRoles.Patient)]

@using Patient.Domain.Constants;
@using Patient.Api.Extensions;
@using Patient.Domain.Repositories
@using Patient.Api.Components.ManageComponents


@inject Microsoft.JSInterop.IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager
@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject IHttpContextAccessor httpContextAccesor
@inject IDiseaseRepository _diseaseRepository


<div class="container px-4">
    
    @if(patientsCurrentlyCuredDiseasesNumber==0 && isCount==true)
    {
        <div class="row">
            <FullfillMedicalInterviewReminderComponent />
        </div>
    }   
    <section style="height: 15%;">
        <div class="row">
            @if (mainIsInitialized)
            {               
                <CascadingValue Value="currentPatient">
                    <Patient.Api.Components.Pages.PatientPages.MainPanel.AdditionalComponents.SummaryComponent ComponentIsInitialized="HandleSummaryComponentInitialized" />
                </CascadingValue>               
            }
            else
            {
                
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
                
            }
        </div>     
    </section>                
    <section>
        <div class="row">
            @if (summaryComponentIsInitialized)
            {               
                <div class="col">
                    <CascadingValue Value="currentPatient">
                        <Patient.Api.Components.Pages.PatientPages.MainPanel.AdditionalComponents.PatientsDoctorsComponent />
                    </CascadingValue>
                </div>
                <div class="col">
                </div>                
            }
            else
            {             
                 <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />             
            }
        </div>                  
    </section>
               
    
</div>

@code {

    private Patient.Domain.Entities.Actors.Patient currentPatient { get; set; } = new();
    private int patientsCurrentlyCuredDiseasesNumber { get; set; }

    private bool mainIsInitialized;
    private bool summaryComponentIsInitialized;
    private bool isCount;

    protected override async Task OnInitializedAsync()
    {
        currentPatient = await _patientManager.GetUserAsync(httpContextAccesor.HttpContext.User);

        patientsCurrentlyCuredDiseasesNumber = await _diseaseRepository.CountPatientsCurrentDiseases(currentPatient.Id);
        isCount = true;

        mainIsInitialized = true;
        StateHasChanged();

    }

    private async void HandleSummaryComponentInitialized()
    {
        summaryComponentIsInitialized = true;
        await InvokeAsync(StateHasChanged);
    }

    
}
