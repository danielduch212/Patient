
@using Patient.Application.Users
@using Patient.Domain.Repositories

@inject IDoctorsRepository _doctorsRepository


<h3 style="color: white;" class="ma-3">Twoi lekarze</h3>
<div class="container pt-3" style="max-height: 200px; overflow-y: auto;">  
    <section>     
        <MudPaper Class="ma-3 summary-item" Elevation="3">
            <MudList T="Patient.Domain.Entities.Actors.Doctor" Class="pt-5">
                @foreach (var item in patientsDoctors)
                {
                    <MudListItem @key="item.Id">
                        <div class="row p-2">
                            <strong>@item.DoctorSpecializations.FirstOrDefault()</strong>
                            <div class="col text-start justify-content-center align-items-center">
                                <small>Imie i nazwisko</small>
                                <p>@item.Name @item.Surname</p>
                            </div>
                            <div class="col text-start">
                                <small>Nr lekarza</small>
                                <p>@item.DoctorNumber</p>
                            </div>
                        </div>

                    </MudListItem>
                }
                @if (patientsDoctors.Count() == 0)
                {
                    <MudListItem >
                        <small>Nie posiadasz jeszcze żadnych przypisanych lekarzy</small>
                    </MudListItem>
                }
            </MudList>
        </MudPaper>            
    </section>

</div>


@code {
    [CascadingParameter]
    private Patient.Domain.Entities.Actors.Patient CurrentPatient { get; set; } = new();
    [Parameter]
    public CancellationTokenSource CancellationSource { get; set; }

    private List<Patient.Domain.Entities.Actors.Doctor> patientsDoctors = new();

    //chart
    private int newRecommandationNumber;
    private int prescriptionsNumber;

    protected override async Task OnInitializedAsync()
    {
        patientsDoctors = await _doctorsRepository.GetPatientsDoctorsToShow(CurrentPatient.Id, CancellationSource.Token);
        StateHasChanged();

    }
}
