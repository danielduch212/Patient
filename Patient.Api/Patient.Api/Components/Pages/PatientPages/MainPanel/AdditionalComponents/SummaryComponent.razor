@using Patient.Application.Account
@using Patient.Application.Users
@using Patient.Domain.Repositories

@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject IRecommandationRepository _recommandationRepository
@inject IPrescriptionRepository _prescriptionRepository
@inject NavigationManager _navigationManager


<div class="container px-4 pt-3">
    <h3 style="color: white;" class="ma-3">Podsumowanie</h3>
    <section>
        <div class="row position-relative">
            <div class="col ">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;" >
                    <h4>Nowe rekomendacje</h4>
                    <h4>@newRecommandationNumber</h4>
                </MudPaper>
            </div>
            <div class="col ">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;" @onclick='() => RedirectTo("recepty")'>
                    <h4>Recepty</h4>
                    <h4>@prescriptionsNumber</h4>
                </MudPaper>
            </div>
            <div class="col ">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;" >
                    <h4>Wiadomosci</h4>
                    <h4>0</h4>
                </MudPaper>
            </div>

        </div>
    </section>
    
</div>




@code {

    [CascadingParameter]
    private Patient.Domain.Entities.Actors.Patient CurrentPatient { get; set; } = new();

    [Parameter]
    public EventCallback ComponentIsInitialized { get; set; }
    [Parameter]
    public CancellationTokenSource CancellationSource { get; set; }

    //chart
    private int newRecommandationNumber;
    private int prescriptionsNumber;

    protected override async Task OnInitializedAsync()
    {

        newRecommandationNumber = await _recommandationRepository.CountPatientsNewRecommandations(CurrentPatient.Id, CancellationSource.Token);
        prescriptionsNumber = await _prescriptionRepository.CountPatientsPrescriptions(CurrentPatient.Id, CancellationSource.Token);
        await Task.Delay(500);
        await ComponentIsInitialized.InvokeAsync();
        await InvokeAsync(StateHasChanged);

    }

    private void RedirectTo(string path)
    {
        _navigationManager.NavigateTo($"/pacjent/{path}");
    }

   
}
