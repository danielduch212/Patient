@layout Patient.Api.Client.Layout.UserLayout

@rendermode @(new InteractiveServerRenderMode(false))

@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Constants
@using Patient.Domain.Entities.DTOs.Reports

@inject IPatientApiService _patientApiService
@inject IBlobStorageService _blobStorageService

@page "/pacjent/raporty/{Id}"


<div class="container px-4">
    <div class="row pt-5">
        <div class="justify-content-start align-content-start">
            <NavLink href="/pacjent/raporty">
                <btn type="button" class="back-icon bi-arrow-left"></btn>
            </NavLink>
        </div>
        @if(readingReport == true)
        {
            <MudProgressCircular Color="Color.Success" Indeterminate="true" />
        }
        else
        {
            <div class="mx-5">
                <CascadingValue Value="reportToShow">
                    <Patient.Api.Components.Pages.AdditionalComponents.ReportPreviewComponent />
                </CascadingValue>
            </div>
        } 

        
        
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private ReportToShowToPatientDto reportToShow = new();
    private bool fileGet;
    private bool readingReport;

    private bool showPreviewModal;


    protected async override Task OnInitializedAsync()
    {
        readingReport = true;
        var response = await _patientApiService.SendRequestGetReport(Id);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            reportToShow = await response.Content.ReadFromJsonAsync<ReportToShowToPatientDto>();
            if (reportToShow.FileNames.Any())
            {
                foreach (var filename in reportToShow.FileNames)
                {
                    var url = await _blobStorageService.GetBlobSasUrl(filename, BlobContainerNames.ReportsFiles);
                    reportToShow.FilesBase64.Add(await LoadImageBase64(url));
                }
            }
            
        }
        
        StateHasChanged();
        readingReport = false;

    }

    private async void HandleShowFile(int positionOnTheList)
    {
        // medicalFileToShowPreview = file;
        // showPreviewModal = true;
        // loadingDocument = true;
        // medicalFileToShowPreview.FileBase64 = await LoadImageBase64(medicalFileToShowPreview.FileUrl);
        // loadingDocument = false;
        // StateHasChanged();
    }

    private async Task<string> LoadImageBase64(string url)
    {
        using (var _httpClient = new HttpClient())
        {
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var imageBytes = await response.Content.ReadAsByteArrayAsync();
                return $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";

            };
            return null;
        }

    }

}
