@layout Patient.Api.Client.Layout.UserLayout

@rendermode @(new InteractiveServerRenderMode(false))

@page "/pacjent/raporty/{Id}"

@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Constants
@using Patient.Domain.Entities.DTOs.Reports

@inject IPatientApiService _patientApiService
@inject IBlobStorageService _blobStorageService
@inject IManageService _manageService


@implements IDisposable


<div class="container px-4 position-relative">
    <div class="row pt-5">
        <div class="justify-content-start align-content-start">
            <NavLink href="/pacjent/raporty">
                <btn type="button" class="back-icon bi-arrow-left"></btn>
            </NavLink>
        </div>
        @if(readingReport == true)
        {
            <MudProgressCircular Color="Color.Success" Indeterminate="true" />
        }
        else
        {
            <div class="mx-5">
                <CascadingValue Value="reportToShow">
                    <Patient.Api.Components.Pages.PatientPages.Reports.AdditionalComponents.ReportPreviewComponent />
                </CascadingValue>
            </div>
        }       
        
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private CancellationTokenSource TokenSource = new();


    private ReportToShowToPatientDto reportToShow = new();
    private bool fileGet;
    private bool readingReport;

    private bool showPreviewModal;


    protected async override Task OnInitializedAsync()
    {
        readingReport = true;
        reportToShow = await _patientApiService.GetReport(Id, TokenSource.Token);
        if (reportToShow.FilesPreviewData.Any())
        {
            foreach (var filePreviewData in reportToShow.FilesPreviewData)
            {
                var url = await _blobStorageService.GetBlobSasUrl(filePreviewData.FileUrl, BlobContainerNames.ReportsFiles);
                filePreviewData.FileBase64 = await _manageService.LoadImageBase64(url);
                
            }
        }        
        readingReport = false;
        StateHasChanged();
    }

    private async void HandleShowFile(int positionOnTheList)
    {
        // medicalFileToShowPreview = file;
        // showPreviewModal = true;
        // loadingDocument = true;
        // medicalFileToShowPreview.FileBase64 = await LoadImageBase64(medicalFileToShowPreview.FileUrl);
        // loadingDocument = false;
        // StateHasChanged();
    }

    public void Dispose()
    {
        TokenSource.Cancel();
        TokenSource.Dispose();
    }
}
