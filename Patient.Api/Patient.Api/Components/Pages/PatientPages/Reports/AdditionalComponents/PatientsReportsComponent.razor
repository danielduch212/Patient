

@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities;
@using Patient.Domain.Entities.DTOs.Reports



@inject IPatientApiService _patientApiService
@inject NavigationManager _navigationManager


<div class="container">
    <h4>Twoje raporty</h4>
    <div class="list-group pt-5">
        @if (readingReports)
        {
            <MudProgressCircular Color="Color.Default" Indeterminate="true">
                    
            </MudProgressCircular>
        }
        @if (filesGet)
        {
            foreach (var report in reportsToShow)
            {
                <button type="button" @onclick="() => HandleShowReportPreview(report)" class="list-group-item list-group-item-action">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <small class="text-muted">Data utworzenia</small>
                            <h5 class="mb-1">@report.DateOfCreating</h5>
                        </div>
                        <div>
                            <small class="text-muted">Status: @(report.IsChecked ? "Sprawdzony" : "Nie sprawdzony")</small>
                        </div>
                    </div>
                </button>
            }
        }
        else
        {
            <div>
                Brak raportow do wyswietlenia
            </div>
        }

    </div>
</div>

@code {
    private List<ReportToShowToPatientDto> reportsToShow = new();
    private bool filesGet;
    private bool readingReports;

    private bool showPreviewModal;


    protected async override Task OnInitializedAsync()
    {
        readingReports = true;
        var response = await _patientApiService.SendRequestGetReports();
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            reportsToShow = await response.Content.ReadFromJsonAsync<List<ReportToShowToPatientDto>>();
            if (reportsToShow.Count > 0) { filesGet = true; }
            StateHasChanged();
        }
        readingReports = false;

    }

    private async void HandleShowReportPreview(ReportToShowToPatientDto report)
    {
        _navigationManager.NavigateTo($"/pacjent/raporty/{report.Id}");
    }
}
