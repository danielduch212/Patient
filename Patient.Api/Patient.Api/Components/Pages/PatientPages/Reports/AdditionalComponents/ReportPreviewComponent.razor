
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Domain.Interfaces
@using Shared.Constants
@using Patient.Application.Users


@inject IPatientApiService _patientApiService
@inject NavigationManager _navigationManager
@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject IPrescriptionRequestRepository _prescriptionRequestRepository
@inject IUserContext _userContext

<div class="container">
    <MudPaper Class="pa-16 ma-2" Elevation="3">

        <h2 class="text-center">Raport</h2>
        @if (!loading)
        {
            <section class="p-3 mb-4 bg-light">
                <div class="row mx-5">
                    <div class="col-5">
                        <MudAvatar Size="Size.Large" Style="width: 10%; height: 10%;">
                            <MudImage Src="/images/pies-rasy-beagle.jpg"></MudImage>
                        </MudAvatar>
                    </div>
                    <div class="col-5">
                        <h3>@currentPatient.Name @currentPatient.Surname</h3>
                        <h3> @currentPatient.Pesel</h3>
                    </div>
                    <div class="col">
                        <h3>@ReportToShow.Urgency</h3>
                    </div>
                </div>
            </section>

            @* <section class="p-3 mb-4 bg-light">
                <div class="row">
                    <h4 style="text-decoration: underline;">Przebieg choroby</h4>
                </div>
            </section> *@

            <section class="p-3 mb-4 bg-light">
                <div class="row d-flex align-items-center">
                    <div class="col">
                        <h6 class="text-start">Data: @ReportToShow.DateOfCreating</h6>
                    </div>
                    <div class="col">
                        <MudRating SelectedValue="@ReportToShow.PatientsHealthRating" MaxValue="10" FullIcon="@Icons.Material.Filled.Favorite" EmptyIcon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Secondary" />
                    </div>

                </div>
                <div class="row">
                    <h4 class="text-start">Pytania i odpowiedzi</h4>                 
                    <div class="row pt-5">
                        <h3>Pytania</h3>
                    </div>
                    @for (int i = 0; i < questionList.Count(); i++)
                    {
                        <div class="list-group-item">
                            <div class="row mt-4 mb-3">
                                <p>@questionList[i]</p>
                                <p>@ReportToShow.PatientsAnswersForQuestions[i]</p>
                            </div>
                        </div>

                    }
                    <div class="row">
                        <p>Dodatkowy opis</p>
                        <p>@ReportToShow.Description</p>
                    </div>
                    
                </div>
                <div class="row">
                    <h5>Pliki</h5>
                </div>
                <div class="row">
                    <h5>Objawy</h5>
                    <div class="row d-flex mt-4 mb-4">
                        @foreach (var item in ReportToShow.PatientsSymptoms)
                        {
                            <span class="badge bg-primary badge-item-custom-erasable mr-2 mb-2">@item</span>
                        }
                    </div>
                </div>
            </section>
            
            <section class="p-3 mb-4 bg-light">
                <div class="row">
                    <h4>Prosby</h4>
                </div>
            </section>
        }
        else
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true"></MudProgressCircular>
        }




    </MudPaper>
    
</div>




@code {
    [CascadingParameter]
    private ReportToShowToPatientDto ReportToShow { get; set; } = new();

    private Patient.Domain.Entities.Actors.Patient currentPatient = new();

    private bool loading;
    private List<string> questionList = new();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var currentUser = await _userContext.GetCurrentUserAsync();
        currentPatient = await _patientManager.FindByIdAsync(currentUser.Id);

        await Task.Delay(1000);
        loading = false;
        questionList = QuestionsForReport.GetAllQuestions();
        StateHasChanged();
    }

    


}
