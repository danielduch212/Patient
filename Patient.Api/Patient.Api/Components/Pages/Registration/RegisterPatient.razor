@rendermode InteractiveServer

@layout Layout.Main.LoggingLayout
@page "/rejestracjapacjent"



@using System.Diagnostics
@using System.Timers
@using AutoMapper
@using Patient.Domain.Interfaces
@using Patient.Domain.Constants
@using Patient.Domain.Exceptions
@using Patient.Domain.Entities.Additional
@using Patient.Api.Components.Pages.Registration.AdditionalClasses




@inject NavigationManager Navigation
@inject HttpClient _httpClient
@inject UserManager<Patient.Domain.Entities.Actors.Patient> userManager
@inject ILogger<RegisterPatient> logger
@inject IMapper mapper
@inject IPasswordHasher<Patient.Domain.Entities.Actors.Patient> passwordHasher
@inject RoleManager<IdentityRole> roleManager
@inject IUserAdditionalValidator userAdditionalValidator
@inject IUserStore<Patient.Domain.Entities.Actors.Patient> userStore
@inject IUserEmailStore<Patient.Domain.Entities.Actors.Patient> userEmailStore




<div class="container">
    <div class="row justify-content-center pt-5">
        <div class="col-md-6">
            <div class="card">
                <h2 class="card-title text-center mb-4">Rejestracja Lekarz</h2>
                <div class="card-body">
                    @if (waitingForResult != false)
                    {
                        <MudProgressCircular Color="Color.Primary"></MudProgressCircular>
                    }else
                    {
                        <EditForm Model="inputPatientData" method="post" OnValidSubmit="OnRegister">
                            <DataAnnotationsValidator />

                            <hr />
                            <ValidationSummary class="text-danger" role="alert" />

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Email" class="form-control" autocomplete="username" aria-required="true" />
                                <label for="email">Email</label>
                                <ValidationMessage For="() => inputPatientData.Email" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Password" type="password" class="form-control" aria-required="true" />
                                <label for="password">Hasło</label>
                                <ValidationMessage For="() => inputPatientData.Password" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.ConfirmPassword" type="password" class="form-control" aria-required="true" />
                                <label for="confirmPassword">Powtórz hasło</label>
                                <ValidationMessage For="() => inputPatientData.ConfirmPassword" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Name" class="form-control" aria-required="true" />
                                <label for="name">Imię</label>
                                <ValidationMessage For="() => inputPatientData.Name" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Surname" class="form-control" aria-required="true" />
                                <label for="surname">Nazwisko</label>
                                <ValidationMessage For="() => inputPatientData.Surname" class="text-danger" />
                            </div>


                            <div class="form-floating mb-3">
                                <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Value="inputPatientData.DateOfBirth"
                                               Label="Data urodzenia" Date="@(new DateTime(2020,10,19))"
                                               DateFormat="yyyy/MM/dd/" />
                                <ValidationMessage For="() => inputPatientData.DateOfBirth" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.City" class="form-control" />
                                <label for="city">Miasto</label>
                                <ValidationMessage For="() => inputPatientData.City" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Street" class="form-control" />
                                <label for="street">Ulica</label>
                                <ValidationMessage For="() => inputPatientData.Street" class="text-danger" />
                            </div>

                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.PostalCode" class="form-control" />
                                <label for="postalCode">Kod pocztowy</label>
                                <ValidationMessage For="() => inputPatientData.PostalCode" class="text-danger" />
                            </div>
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="inputPatientData.Pesel" class="form-control" aria-required="true" />
                                <label for="pesel">Pesel</label>
                                <ValidationMessage For="() => inputPatientData.Pesel" class="text-danger" />
                            </div>

                            <button type="submit" class="btn btn-primary btn-custom-primary">Zarejestruj</button>

                        </EditForm>
                    }
                </div>

            </div>
            @if (badRegistration == true)
            {
                <div class="alert alert-info" role="alert">
                    Nieprawidlowa rejestracja
                    @foreach (var error in registrationResult.Errors)
                    {
                        <div class="alert alert-info">
                            @error
                        </div>
                    }

                </div>
            }
            @if (successfullRegistration == true)
            {
                <div class="alert alert-success" role="alert">
                    Rejestracja przebiegla pomyslnie!
                </div>

            }

        </div>
    </div>
</div>





@code {

    private InputRegisterPatientModel inputPatientData { get; set; } = new();

    private Patient.Domain.Entities.Additional.IdentityOperationResult registrationResult = new IdentityOperationResult();
    private bool successfullRegistration;
    private bool badRegistration;

    private bool result;
    private bool userBeingRegistered;
    private bool waitingForResult;


    private async Task OnRegister()
    {

        badRegistration = false;
        successfullRegistration = false;

        try
        {
            logger.LogInformation("Trying register user");
            waitingForResult = true;
            userBeingRegistered = true;


            var user = CreateUser();

            await userStore.SetUserNameAsync(user, inputPatientData.Email, CancellationToken.None);
            var emailStore = GetEmailStore();
            await emailStore.SetEmailAsync(user, inputPatientData.Email, CancellationToken.None);


            (var isDataValidate, var message) = await userAdditionalValidator.ValidatePatientData(inputPatientData.Pesel, inputPatientData.Email);
            if (isDataValidate)
            {
                var patient = new Patient.Domain.Entities.Actors.Patient()
                    {
                        NormalizedUserName = inputPatientData.Email.ToLower(),
                        Name = inputPatientData.Name,
                        Surname = inputPatientData.Surname,
                        Email = inputPatientData.Email,
                        DateOfBirth = DateOnly.FromDateTime(inputPatientData.DateOfBirth),
                        UserName = inputPatientData.Email,
                        Address = new Address()
                        {
                            City = inputPatientData.City,
                            Street = inputPatientData.Street,
                            PostalCode = inputPatientData.PostalCode,
                        },
                        Pesel = inputPatientData.Pesel,
                    };


                var hashedPassword = passwordHasher.HashPassword(patient, inputPatientData.Password);
                patient.PasswordHash = hashedPassword;
                var resultFromCreating = await userManager.CreateAsync(patient);
                result = resultFromCreating.Succeeded;
                if (result)
                {
                    logger.LogInformation("Patient with given email created: {Email}", inputPatientData.Email);
                    var role = await roleManager.FindByNameAsync(UserRoles.Patient);
                    if (role == null) { throw new NotFoundException(nameof(IdentityRole), UserRoles.Patient); }
                    await userManager.AddToRoleAsync(patient, role.ToString());
                    logger.LogInformation($"User with given email added to role Patient: {inputPatientData.Email}");
                }
                registrationResult.Errors = resultFromCreating.Errors.Select(e => e.Description.ToString()).ToList();


            }
            registrationResult.IsSuccess = isDataValidate;
            List<string> messageError = new List<string>();
            messageError.Add(message);
            registrationResult.Errors = messageError;

            waitingForResult = false;

            if (registrationResult.IsSuccess == true)
            {
                successfullRegistration = true;
                StateHasChanged();
                await Task.Delay(3000);
                Navigation.NavigateTo("/logowaniePacjent");
            }
            else
            {
                badRegistration = true;
                successfullRegistration = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            
        }
        

    }

    private Patient.Domain.Entities.Actors.Patient CreateUser()
    {
        try
        {
            return Activator.CreateInstance<Patient.Domain.Entities.Actors.Patient>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Patient.Domain.Entities.Actors.Patient)}'. " +
                $"Ensure that '{nameof(Patient.Domain.Entities.Actors.Patient)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<Patient.Domain.Entities.Actors.Patient> GetEmailStore()
    {
        if (!userManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Patient.Domain.Entities.Actors.Patient>)userStore;
    }

}
