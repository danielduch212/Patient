@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using System.Net.Http
@using Patient.Domain.Entities.DTOs.MedicalFiles
@using MudBlazor

@inject NavigationManager navigationManager
@inject IDoctorApiService _doctorApiService
@inject IManageService _manageService


<div class="container">
    <div class="row d-flex d-flex-row pt-5 border-top-0 border-dark">
        @if (readingFiles)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }

        <div class="col d-flex d-flex-row pt-2 position-relative" style="height: 100px;">
            @if (filesGet)
            {
                @foreach (var file in medicalFilesToShow)
                {
                    <div class="file-block mx-2" style="cursor: pointer;" @onclick="() => HandleShowFile(file)">
                        <div class="bi-file-icon"></div>
                    </div>
                }
            }
            @if (showPreviewModal)
            {
                <div class="modal-backdrop">
                    <div class="modal" tabindex="-1" style="display:block;">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Podglad pliku</h5>
                                <button type="button" class="btn-close" @onclick="CloseModal"></button>
                            </div>
                            <div class="modal-body">
                                <div class="container">
                                    <div class="row">
                                        <div class="col-4">
                                            <p>Nazwa pliku</p>
                                            <p>@medicalFileToShowPreview.FileName</p>
                                        </div>
                                        <div class="col-8">
                                            <p>Typ pliku</p>
                                            <p></p>
                                        </div>
                                    </div>

                                    <div class="row">

                                        <div class="col">
                                            <img src=@medicalFileToShowPreview.FileBase64 />
                                            <p>Opis</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-primary btn-custom-primary" @onclick="CloseModal">Zamknij</button>
                            </div>
                        </div>
                    </div>
                </div>
                @* <div style="transform: translate(80%, 8%);"> *@
                @* <Patient.Api.Components.Pages.AdditionalComponents.PreviewFileModal
            CurrentFileBase64="@medicalFileToShowPreview.FileBase64"
            CurrentFileName="@medicalFileToShowPreview.FileName"
            CurrentFileType="@medicalFileToShowPreview.MedicalDocumentationType" /> *@
                @* </div> *@

            }
        </div>

    </div>
</div>


@code {

    [Parameter]
    public CancellationTokenSource TokenSource { get; set; }
    [Parameter]
    public string PatientId { get; set; }

    private List<MedicalFileToShowDto> medicalFilesToShow = new();
    private bool filesGet;
    private bool readingFiles;

    private int maxFiles = 5;

    private bool showPreviewModal;
    private MedicalFileToShowDto medicalFileToShowPreview = new();

    private bool loadingDocument;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(100);
        readingFiles = true;
        medicalFilesToShow = await _doctorApiService.GetPatientsMedicalDoc(PatientId, TokenSource.Token);
        if (medicalFilesToShow.Count > 0) { filesGet = true; }
        readingFiles = false;
        StateHasChanged();
    }

    private async void HandleShowFile(MedicalFileToShowDto file)
    {
        medicalFileToShowPreview = file;
        medicalFileToShowPreview.FileBase64 = await _manageService.LoadImageBase64(medicalFileToShowPreview.FileUrl);
        showPreviewModal = true;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        showPreviewModal = false;
    }
}
