@using Patient.Application.Account
@using Patient.Domain.Repositories

@inject UserManager<Patient.Domain.Entities.Actors.Doctor> _doctorManager


@inject IReportRepository _reportRepository
@inject IPrescriptionRequestRepository _prescriptionRequestRepository
@inject NavigationManager _navigationManager
@inject IPatientsRepository _patientsRepository

<div class="container px-4">
    <h3>Podsumowanie</h3>
    <div class="row position-relative">
        <div class="col">           
            <MudPaper Class="pa-4 ma-2 summary-item" Elevation="3" Style="cursor: pointer;" @onclick='() => RedirectTo("raporty")'>
                <h4>Nowe raporty</h4>
                <h4>@reportsNumber</h4>
            </MudPaper>
           
        </div>
        <div class="col">
            <MudPaper Class="pa-4 ma-2 summary-item" Elevation="3" Style="cursor: pointer;" @onclick='() => RedirectTo("recepty")'>
                <h4>Prośby o recepty</h4>
                <h4>@prescriptionRequestsNumber</h4>
            </MudPaper>
        </div>
        <div class="col">
            <MudPaper Class="pa-4 ma-2 summary-item" Elevation="3" Style="cursor: pointer;" >
                <h4>Twoi Pacjenci</h4>
                <h4>@patientsNumber</h4>
                
            </MudPaper>
        </div>
    </div>
</div>




@code {

    [Parameter]
    public EventCallback ComponentIsInitialized { get; set; }
    [Parameter]
    public CancellationTokenSource TokenSource { get; set; }

    [CascadingParameter]
    public Patient.Domain.Entities.Actors.Doctor CurrentDoctor { get; set; } = new();

    private int reportsNumber;
    private int prescriptionRequestsNumber;
    private int patientsNumber;

    protected override async Task OnInitializedAsync()
    {
        reportsNumber = await _reportRepository.GetDoctorReportsNumber(CurrentDoctor, TokenSource.Token);
        prescriptionRequestsNumber = await _prescriptionRequestRepository.CountDoctorsPrescriptionRequests(CurrentDoctor.Id, TokenSource.Token);
        patientsNumber = await _patientsRepository.CountDoctorsPatients(CurrentDoctor.Id, TokenSource.Token);
        await Task.Delay(500);
        await ComponentIsInitialized.InvokeAsync();
    }

    private void RedirectTo(string path)
    {
        _navigationManager.NavigateTo($"/lekarz/{path}");
    }

   
}
