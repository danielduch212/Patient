
@using Patient.Domain.Repositories

@inject IPatientsRepository _patientsRepository

<div class="container pt-3">
    <h3 style="color: white;" class="ma-3">Twoi Pacjenci</h3>
    <section>     
        <MudPaper Class="ma-3 summary-item" Elevation="3">
            <MudList T="Patient.Domain.Entities.Actors.Doctor" Class="pt-5">
                @foreach (var item in doctorsPatients)
                {
                    <MudListItem @key="item.Id">
                        <div class="row p-2">
                            <small>Pacjent</small>
                            <div class="col text-center justify-content-center align-items-center">
                                <p>@item.Name @item.Surname</p>
                            </div>                           
                        </div>

                    </MudListItem>
                }
            </MudList>
        </MudPaper>            
    </section>

</div>


@code {
    [CascadingParameter]
    public Patient.Domain.Entities.Actors.Doctor CurrentDoctor { get; set; } = new();
    [Parameter]
    public CancellationTokenSource TokenSource { get; set; }


    private List<Patient.Domain.Entities.Actors.Patient> doctorsPatients = new();

    //chart
    private int newRecommandationNumber;
    private int prescriptionsNumber;

    protected override async Task OnInitializedAsync()
    {
        doctorsPatients = await _patientsRepository.GetDoctorsPatients(CurrentDoctor.Id, TokenSource.Token);
        StateHasChanged();
    }
}
