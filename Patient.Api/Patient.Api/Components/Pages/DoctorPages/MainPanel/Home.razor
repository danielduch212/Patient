@layout Patient.Api.Components.Layout.Doctor.DoctorLayout

@rendermode @(new InteractiveServerRenderMode(false))
@attribute [Authorize(Roles = UserRoles.Doctor)]

@page "/lekarz"


@using Patient.Domain.Constants
@using Patient.Application.Account
@using Patient.Domain.Repositories
@using Patient.Application.Users

@inject UserManager<Patient.Domain.Entities.Actors.Doctor> _doctorManager

@inject IReportRepository _reportRepository
@inject IPrescriptionRequestRepository _prescriptionRequestRepository
@inject NavigationManager _navigationManager
@inject IUserContext _userContext

@implements IDisposable


<div class="container px-5">
    <section style="height: 15%;">
        <div class="row">
            @if (mainComponentIsInitialized)
            {
                <CascadingValue Value="currentDoctor">
                    <Patient.Api.Components.Pages.DoctorPages.MainPanel.AdditionalComponents.SummaryComponent ComponentIsInitialized="HandleSummaryComponentIsInitialized" TokenSource="tokenSource"/>
                </CascadingValue>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
            }
        </div>     
    </section>  
    <section>
        <div class="row">
            @if (summaryComponentIsInitialized)
            {
                <div class="col">
                    <CascadingValue Value="currentDoctor">
                        <Patient.Api.Components.Pages.DoctorPages.MainPanel.AdditionalComponents.DoctorsPatientsComponent TokenSource="tokenSource"/>
                    </CascadingValue>
                </div>
                <div class="col">
                </div>
            }
            else
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Large" />
            }
        </div>       
    </section>

</div>


@code {
    private bool mainComponentIsInitialized;
    private bool summaryComponentIsInitialized;
    private Patient.Domain.Entities.Actors.Doctor currentDoctor {get;set;} = new();
    private CancellationTokenSource tokenSource = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);
        var currentUser = await _userContext.GetCurrentUserAsync();
        currentDoctor = await _doctorManager.FindByIdAsync(currentUser.Id);

        mainComponentIsInitialized = true;


    }

    private async void HandleSummaryComponentIsInitialized()
    {
        summaryComponentIsInitialized = true;
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
    }
}
