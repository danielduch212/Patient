@layout Patient.Api.Components.Layout.Doctor.DoctorLayout

@rendermode @(new InteractiveServerRenderMode(false))

@page "/lekarz/recepty"

@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities;
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Application.Users


@inject IPatientApiService _patientApiService
@inject NavigationManager _navigationManager
@inject UserManager<Patient.Domain.Entities.Actors.Doctor> _doctorManager
@inject IPrescriptionRequestRepository _prescriptionRequestRepository
@inject IUserContext userContext

@implements IDisposable

<div class="container px-4 position-relative">
    <section>
        <div class="row text-center">
            <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                <h3></h3>
                
            </MudPaper>
        </div>
    </section>
    <section>
        <div class="row">
            <div class="col">
                @if(mainComponentIsInitialized)
                {
                    <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                        <Patient.Api.Components.Pages.DoctorPages.Prescriptions.AdditionalComponents.DoctorsPrescriptionsComponent OnRefresh="Refresh" TokenSource="tokenSource" />
                    </MudPaper>
                }
                else{
                    <div class="row text-center">
                        <MudProgressCircular Color="Color.Primary" Indeterminate="true"></MudProgressCircular>
                    </div>
                }
                
            </div>
            <div class="col">
                <MudPaper Class="pa-4 ma-3 summary-item" Elevation="3" Style="cursor: pointer;">
                    <h3>Prośby o recepty</h3>
                    <h3>@prescriptionRequestsNumber</h3>
                </MudPaper>
            </div>
        </div>
    </section>
   
</div>


@code {

    private Patient.Domain.Entities.Actors.Doctor currentDoctor = new();
    private int prescriptionRequestsNumber;

    private CancellationTokenSource tokenSource = new();

    private bool mainComponentIsInitialized;
    protected override async Task OnInitializedAsync()
    {
        await CountDoctorPrescriptionRequests();
        mainComponentIsInitialized = true;
    }

    private async Task CountDoctorPrescriptionRequests()
    {
        var currentUser = await userContext.GetCurrentUserAsync();
        currentDoctor = await _doctorManager.FindByIdAsync(currentUser.Id);
        prescriptionRequestsNumber = await _prescriptionRequestRepository.CountDoctorsPrescriptionRequests(currentDoctor.Id, tokenSource.Token);
        StateHasChanged();
    }

    private async Task Refresh()
    {
        await CountDoctorPrescriptionRequests();
    }

    public void Dispose()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
    }

}
