@using static Patient.Api.Components.Pages.DoctorPages.Reports.ReportPreview
@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Constants
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Domain.Entities.DTOs.Recommandation
@using Patient.Domain.Entities.DTOs.Prescription
@using System.ComponentModel.DataAnnotations
@using Blazored.Typeahead
@using MudBlazor
@using MudBlazor.Components
@using Patient.Api.Components.Pages.DoctorPages.Reports.AdditionalComponents



@inject IDoctorApiService _doctorApiService
@inject IReportRepository _reportRepository
@inject ISnackbar snackBar
@inject IMedicineRepository _medicineRepository



<div class="modal-backdrop">
    <div class="modal" tabindex="-1" style="display:block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Podglad</h5>
                <button type="button" class="btn-close" @onclick="CloseModalAddRecommandation"></button>
            </div>
            <div class="modal-body">
                <div class="container">
                    @if (addingRecomandation)
                    {
                        @if(addingRecomandation==true&&successfullyAdded==false&&addingFailed==false)
                        {
                            <h2 class="text-center">Dodawanie rekomendacji</h2>
                            <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                        }
                        @if (successfullyAdded)
                        {
                            <MudAlert Severity="Severity.Success">Pomyślnie dodano rekomendację</MudAlert>
                        }
                        @if(addingFailed)
                        {
                            <MudAlert Severity="Severity.Error">Nie udało się dodać rekomendacji</MudAlert>
                        }


                    }
                    else
                    {
                        <h3>Dodaj Rekomendację</h3>
                        <h4>Pacjent: </h4>
                        <h4>@addRecommandationModalData.CurrentPatient.Pesel</h4>
                        <h5 class="pt-2">Opis:</h5>
                        <InputTextArea id="description" style="width: 100%; height: 200px; resize: none;" @bind-Value="medicalRecommandation.Description" class="form-control"></InputTextArea>
                        <div class="row pt-5">
                            <div class="col d-flex justify-content-center align-items-center">
                                <div class="form-check">
                                    <InputCheckbox id="askForVisit" @bind-Value="askForVisit"></InputCheckbox>
                                    <label for="askForVisit" class="form-check-label">Zapros na wizyte</label>
                                </div>
                                <div class="form-check">
                                    <InputCheckbox id="askForVisitOnline" @bind-Value="askForVisitOnline">Zapros na wizyte online</InputCheckbox>
                                    <label for="askForVisitOnline" class="form-check-label">Zapros na wizyte online</label>
                                </div>
                            </div>
                            <div class="col">
                                <btn type="button" class="btn btn-primary" @onclick="ToggleAddPrescription">Dodaj Receptę</btn>
                            </div>

                        </div>
                        @if (addPrescription)
                        {
                            <div class="row pt-5 p-2">
                                <div class="col-2">
                                    <p>Wybierz Lek</p>
                                </div>
                                <div class="col-8">
                                    <BlazoredTypeahead SearchMethod="GetMedicinesBySearchPhrase"
                                                       @bind-Value="medicine">
                                        <SelectedTemplate>@context.Name</SelectedTemplate>
                                        <ResultTemplate>@context.Name</ResultTemplate>
                                    </BlazoredTypeahead>
                                </div>
                                <div class="col-2">
                                    <MudBlazor.MudButton @onclick="AddMedicine">
                                        Dodaj lek
                                    </MudBlazor.MudButton>
                                </div>
                            </div>

                            <MudList T="MedicineToPrescription" Class="pt-5">
                                @foreach (var item in medicinesToPrescript)
                                {
                                    <MudListItem @key="item.Id">
                                        <div class="row p-2">
                                            <div class="col text-center justify-content-center align-items-center">
                                                <p>Nazwa leku</p>
                                                <p>@item.ChosenMedicine.Name</p>
                                            </div>
                                            <div class="col-6 text-center justify-content-center align-items-center align-content-center">
                                                <p>Dawkowanie</p>
                                                <MudTextField @bind-Value="@item.MedicineDosingDescription" Immediate="false" Label="Opisz dawkowanie" class="form-control" DebounceInterval="200"></MudTextField>
                                            </div>
                                            <div class="col-2 justify-content-center align-items-center align-content-center">
                                                <MudBlazor.MudButton @onclick="(()=>RemoveMedicine(item))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Usuń</MudBlazor.MudButton>
                                            </div>
                                        </div>

                                    </MudListItem>
                                }
                            </MudList>

                        }
                    }
                    
                </div>
            </div>
            <div class="modal-footer">
                <btn type="button" class="btn btn-primary" @onclick="AddRecommandationAsync">Dodaj rekomendację</btn>
                <button class="btn btn-secondary" @onclick="CloseModalAddRecommandation">Zamknij</button>

            </div>
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public AddRecommandationModalData addRecommandationModalData { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    private MedicineToPrescription medicineToPrescription = new();
    private MedicalRecommandationDto medicalRecommandation = new();
    private Medicine medicine = new();
    private List<MedicineToPrescription> medicinesToPrescript = new();

    private bool askForVisit;
    private bool askForVisitOnline;
    private bool addPrescription;

    //loading
    private bool addingRecomandation;
    private bool successfullyAdded;
    private bool addingFailed;



    private async Task<IEnumerable<Medicine>> GetMedicinesBySearchPhrase(string searchTerm)
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            return new List<Medicine>();
        }
        return await _medicineRepository.SearchMedicines(searchTerm);


    }

    private async Task AddRecommandationAsync()
    {
        //check
        addingRecomandation = true;
        PrescriptionDto prescription = new()
        {
                MedicineNames = GetPrescriptionMedicinesNames(),
                Description = GetPrescriptionDescription(),
                PatientId = addRecommandationModalData.CurrentPatient.Id,               

        };

        medicalRecommandation.Prescription = prescription;
        medicalRecommandation.AskForVisit = askForVisit;
        medicalRecommandation.AskForVisitOnline = askForVisitOnline;
        medicalRecommandation.PatientId = addRecommandationModalData.CurrentPatient.Id;
        medicalRecommandation.ReportId = int.Parse(addRecommandationModalData.ReportId);

        var result = await _doctorApiService.SendRequestAddRecommandation(medicalRecommandation);
        if (result.IsSuccessStatusCode)
        {
            successfullyAdded = true;
            StateHasChanged();
            await Task.Delay(4000);
            successfullyAdded = false;
            await InvokeAsync(CloseModalAddRecommandation);
        }
        else
        {
            addingFailed = true;
            StateHasChanged();

            await Task.Delay(4000);
            addingFailed = false;
        }

        addingRecomandation = false;
    }

    private void AddMedicine()
    {
        MedicineToPrescription medicineToPrescription = new()
            {
                ChosenMedicine = medicine,
                Id = medicinesToPrescript.Count() +1
            };

        medicinesToPrescript.Add(medicineToPrescription);
        StateHasChanged();
    }

    private void ToggleAddPrescription()
    {
        addPrescription = !addPrescription;
    }

    private void CloseModalAddRecommandation()
    {
        OnClose.InvokeAsync();
    }

    private void RemoveMedicine(MedicineToPrescription item)
    {
        medicinesToPrescript.Remove(item);
        //StateHasChanged();
    }

    private List<string> GetPrescriptionMedicinesNames()
    {
        List<string> medicineNamesList = new();
        foreach (var item in medicinesToPrescript)
        {
            medicineNamesList.Add(item.ChosenMedicine.Name);
        }
        return medicineNamesList;
    }

    private string GetPrescriptionDescription()
    {
        string medicinePrescriptionDescription = "";

        foreach (var item in medicinesToPrescript)
        {
            medicinePrescriptionDescription = medicinePrescriptionDescription + item.ChosenMedicine.Name + item.MedicineDosingDescription + "\n";
        }
        return medicinePrescriptionDescription;
    }

}
