@using static Patient.Api.Components.Pages.DoctorPages.Reports.ReportPreview
@using Patient.Domain.Constants
@using Blazored.Typeahead
@using MudBlazor
@using MudBlazor.Components
@using System.ComponentModel.DataAnnotations
@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Domain.Entities.DTOs.Recommandation
@using Patient.Domain.Entities.DTOs.Prescription
@using Patient.Api.Components.Pages.DoctorPages.Reports.AdditionalComponents

<div class="container">
    <div class="row text-center">
        <p>Wybierz lekarza</p>
        <div class="col-8">
            <BlazoredTypeahead SearchMethod="SearchDoctorTypes"
                                @bind-Value="doctorSpecialization">
                <SelectedTemplate>@context</SelectedTemplate>
                <ResultTemplate>@context</ResultTemplate>
            </BlazoredTypeahead>
        </div>
        <div class="col-4">
            <MudBlazor.MudButton @onclick="AddDoctor" Size="Size.Small">
                Dodaj lekarza
            </MudBlazor.MudButton>
        </div>
    </div>

    <MudList T="string" Class=" custom-mud-list">
        @foreach (var item in chosenDoctorTypes)
        {
            <MudListItem Class="custom-mud-list-item">
                <div class="row d-flex d-flex-row justify-content-center">

                    <div class="col text-center">
                        <p class="mb-0">@item</p> 
                    </div>
                    <div class="col text-end">
                        <MudBlazor.MudButton @onclick="(() => RemoveDoctorType(item))"
                                             Variant="Variant.Filled"
                                             StartIcon="@Icons.Material.Filled.Delete"
                                             Color="Color.Error"
                                             Size="Size.Small">        
                            Usuń
                        </MudBlazor.MudButton>
                    </div>
                </div>

            </MudListItem>
        }
        @if (chosenDoctorTypes.Count() > 0)
        {
            <div class="row pt-2 d-flex justify-content-center align-items-center">
                <MudBlazor.MudButton @onclick="HandleAddConsult" Color="Color.Success">
                    Zatwierdz
                </MudBlazor.MudButton>
            </div>
        }
        
    </MudList>
           

</div>


@code {

    [CascadingParameter]
    public int ReportId { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnAdded { get; set; }

    private string doctorSpecialization = "";
    private List<string> chosenDoctorTypes = new();
    private List<string> doctorTypes = new();

    protected override Task OnInitializedAsync()
    {
        doctorTypes = Patient.Domain.Constants.DoctorSpecialization.GetAllTypes();
        return Task.CompletedTask;
    }

    private async Task<IEnumerable<string>> SearchDoctorTypes(string searchPhrase)
    {
        if (string.IsNullOrWhiteSpace(searchPhrase))
        {
            return new List<string>();
        }
        var result = doctorTypes
            .Where(specialization => specialization.Contains(searchPhrase, StringComparison.OrdinalIgnoreCase))
            .ToList();

        return await Task.FromResult(result);
    }
    private void AddDoctor()
    {
        chosenDoctorTypes.Add(doctorSpecialization);
        StateHasChanged();
    }

    private async void RemoveDoctorType(string item)
    {
        chosenDoctorTypes.Remove(item);
    }

    private async void HandleAddConsult()
    {
        await OnAdded.InvokeAsync(chosenDoctorTypes);
        //dodawanie do reportu lekarza innego - mysle ze mozna w tym komponencie to zrobic

    }

    
}
