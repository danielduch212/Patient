@layout Patient.Api.Components.Layout.Doctor.DoctorLayout

@page "/lekarz/raporty"

@rendermode @(new InteractiveServerRenderMode(false))


@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities;
@using Patient.Domain.Entities.DTOs.Reports


@inject IDoctorApiService _doctorApiService
@inject NavigationManager _navigationManager

<div class="page-background">

    <div class="container px-4">
        <div class="row pt-5">
            <div class="col d-flex justify-content-center align-items-center">
                
            </div>
            <div class="col-4 d-flex d-flex-column justify-content-center align-items-center">
            </div>
        </div>
        <div class="list-group pt-5">
            @if (readingReports)
            {
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }

            @if (filesGet)
            {
                foreach (var report in reportsToShow)
                {
                    <button type="button" @onclick="() => HandleShowReportPreview(report)" class="list-group-item list-group-item-action">
                        Raport
                        <div class="d-flex-row justify-content-between align-items-center">
                            <div>
                                <small class="text-muted">Data utworzenia</small>
                                <h5 class="mb-1">@report.DateOfCreating</h5>

                            </div>
                            <div>
                                <small class="text-muted">Pacjent: </small>
                                <h5 class="mb-1">@report.PatientName  @report.PatientSurname</h5>
                            </div>
                            <div>
                                <small class="text-muted">Status: @(report.IsChecked ? "Sprawdzony" : "Nie sprawdzony")</small>
                            </div>

                        </div>

                    </button>
                }
            }
            else
            {
                <div>
                    Brak raportow do wyswietlenia
                </div>
            }
            
        </div>

    </div>

</div>

@code {

    private int maxFiles = 5;
    private List<ReportForDoctorDto> reportsToShow = new();
    private bool filesGet;
    private bool readingReports;

    private bool showPreviewModal;


    protected async override Task OnInitializedAsync()
    {
        readingReports = true;
        var reportsToShow = await _doctorApiService.GetReports();
        if (reportsToShow.Count > 0) { filesGet = true; }
        StateHasChanged();
        readingReports = false;
    }

    private async void HandleShowReportPreview(ReportForDoctorDto report)
    {
        _navigationManager.NavigateTo($"/lekarz/raporty/{report.Id}");
    }

}
