@layout Patient.Api.Components.Layout.Doctor.DoctorLayout

@rendermode @(new InteractiveServerRenderMode(false))

@page "/lekarz/raporty/{ReportId}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Constants
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Domain.Entities.DTOs.Recommandation
@using Patient.Domain.Entities.DTOs.Prescription
@using System.ComponentModel.DataAnnotations
@using Blazored.Typeahead
@using MudBlazor
@using MudBlazor.Components
@using Patient.Api.Components.Pages.DoctorPages.Reports.AdditionalComponents


@inject IDoctorApiService _doctorApiService
@inject IBlobStorageService _blobStorageService
@inject IDoctorsRepository _doctorsRepository
@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject NavigationManager _navigationManager
@inject ProtectedSessionStorage sessionStorage
@inject IMedicineRepository _medicineRepository
@inject IDialogService DialogService
@inject IReportRepository _reportRepository
@inject ISnackbar snackBar


@implements IDisposable


<div>
    <div class="container px-4  ">

        <div class="row pt-5 position-relative">
            <div class="justify-content-start align-content-start">
                <NavLink href="/lekarz/raporty">
                    <btn type="button" class="btn back-icon bi-arrow-left"></btn>
                </NavLink>
            </div>
            @if (readingReport)
            {
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            }
            else
            {
                <div class="mx-5">
                    <CascadingValue Value="reportToShow">
                        <Patient.Api.Components.Pages.DoctorPages.Reports.ReportPreviewComponent TokenSource="tokenSource"/>
                    </CascadingValue>
                </div>
            }
        </div> 

    </div>        
    <div class="container px-4">
        <div class="row d-flex mx-5">
            <div class="col text-center mx-5">
                <btn type="button" class="btn btn-primary mt-5" @onclick="HandleShowRecommandationModal">Dodaj rekomendacje</btn>
            </div>
            <div class="col text-center mx-5">
                <div class="position-relative">
                    <button class="btn btn-primary mt-5" type="button" data-toggle="collapse" data-target="#collapseCard" aria-expanded="false" aria-controls="collapseCard">
                        Popros o konsultacje
                    </button>
                    <div class="collapse position-relative" id="collapseCard" style="left: 33.5%; width: 70%;">
                        <div class="card card-body position-absolute" style="z-index: 1000; transform: translateY(0);">
                            <CascadingValue Value="ReportId">
                                <AskForConsultationComponent TokenSource="tokenSource"/>
                            </CascadingValue>
                        </div>  
                    </div>
                </div>
            </div>
        </div>
            
             
    </div>
    @if (showPreviewFileModal)
    {
        <CascadingValue Value="previewFileModalData">
            <Patient.Api.Components.Pages.AdditionalComponents.PreviewFileModal OnClose="CloseModalFilePreview" />
        </CascadingValue>
    }
    @if (showAddRecommandationModal)
    {
        <CascadingValue Value="addRecommandationModalData">
            <AddRecommandationModal OnClose="CloseModalAddRecommandation" TokenSource="tokenSource"/>
        </CascadingValue>
    }
</div>




@code {

    [Parameter]
    public string ReportId { get; set; }

    private CancellationTokenSource tokenSource = new();
    private ReportForDoctorToShowDto reportToShow = new();

    private bool fileGet;
    private bool readingReport;

    private bool showAddRecommandationModal;
    private bool loading;


    private List<Patient.Domain.Entities.Actors.Doctor> doctors = new();

    //PreviewFileModal

    private bool showPreviewFileModal;
    private PreviewFileModalData previewFileModalData = new();

    ///

    private Patient.Domain.Entities.Actors.Patient currentPatient = new();

    //RecommendationModal
    AddRecommandationModalData addRecommandationModalData = new();

    //askForConsultationModal
    private bool showAskForConsultationModal;


    protected async override Task OnInitializedAsync()
    {
        readingReport = true;

        var reportToShow = await _doctorApiService.GetReport(ReportId, tokenSource.Token);
        if (reportToShow.FileNames.Any())
        {
            foreach (var filename in reportToShow.FileNames)
            {
                var url = await _blobStorageService.GetBlobSasUrl(filename, BlobContainerNames.ReportsFiles);
                var fileBase64 = await LoadImageBase64(url);
                reportToShow.FilesBase64.Add(fileBase64);
            }
        }
        foreach (var doctorId in reportToShow.DoctorsId)
        {
            var doctor = await _doctorsRepository.GetDoctorByIdAsync(doctorId, tokenSource.Token);
            doctors.Add(doctor);
        }
        currentPatient = await _patientManager.FindByIdAsync(reportToShow.PatientId);
        StateHasChanged();
        readingReport = false;

    }

    private void HandleShowFile(int positionOnTheList)
    {
        previewFileModalData.CurrentFileBase64 = reportToShow.FilesBase64.ElementAt(positionOnTheList);
        previewFileModalData.CurrentFileName = reportToShow.FileNames.ElementAt(positionOnTheList);
        previewFileModalData.ShowPreviewFileModal = true;      

        StateHasChanged();
    }

    private async void HandleShowPatient()
    {
        _navigationManager.NavigateTo($"/lekarz/pacjenci?PatientId={currentPatient.Id}&ReportId={reportToShow.Id}");

    }

    private async void HandleShowRecommandationModal()
    {
        var report = await _reportRepository.GetReport(int.Parse(ReportId), tokenSource.Token);
        if (report.MedicalRecommandationId != null)
        {
            snackBar.Add("Raport zawiera już rekomendację", Severity.Error);
            return;
        }
        addRecommandationModalData.CurrentPatient = currentPatient;
        addRecommandationModalData.ReportId = ReportId;
        showAddRecommandationModal = true;

        StateHasChanged();
    }

    private void CloseModalAddRecommandation()
    {
        showAddRecommandationModal = false;
    }

    private void CloseComponentAskForConsul(List<string> chosenDoctorTypes)
    {
        showAskForConsultationModal = false;
    }

    private void CloseModalFilePreview()
    {
        previewFileModalData.ShowPreviewFileModal = false;
        StateHasChanged();
    }

    private async Task<string> LoadImageBase64(string url)
    {
        using (var _httpClient = new HttpClient())
        {
            var response = await _httpClient.GetAsync(url);
            if (response.IsSuccessStatusCode)
            {
                var imageBytes = await response.Content.ReadAsByteArrayAsync();
                return $"data:image/jpeg;base64,{Convert.ToBase64String(imageBytes)}";

            };
            return null;
        }

    }

    public sealed class MedicineToPrescription()
    {
        public int Id;
        public Medicine ChosenMedicine { get; set; } = new();
        public string MedicineDosingDescription { get; set; } = "";
    }

    //Modal klasy pomocnicze
    public class PreviewFileModalData()
    {
        public string CurrentFileBase64 { get; set; } = "";
        public string CurrentFileName { get; set; } = "";
        public bool ShowPreviewFileModal { get; set; }
    }
    public class AddRecommandationModalData()
    {      
        public Patient.Domain.Entities.Actors.Patient CurrentPatient { get; set; }
        public string ReportId { get; set; }

    }

    public void Dispose()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
    }
}
