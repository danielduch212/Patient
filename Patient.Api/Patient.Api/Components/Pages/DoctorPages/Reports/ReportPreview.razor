@layout Patient.Api.Components.Layout.Doctor.DoctorLayout

@rendermode @(new InteractiveServerRenderMode(false))

@page "/lekarz/raporty/{ReportId}"

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Patient.Domain.Interfaces
@using Patient.Domain.Entities.DTOs
@using Patient.Domain.Entities
@using Patient.Domain.Constants
@using Patient.Domain.Entities.DTOs.Reports
@using Patient.Domain.Repositories
@using Patient.Domain.Entities.DTOs.Recommandation
@using Patient.Domain.Entities.DTOs.Prescription
@using System.ComponentModel.DataAnnotations
@using Blazored.Typeahead
@using MudBlazor
@using MudBlazor.Components
@using Patient.Api.Components.Pages.DoctorPages.Reports.AdditionalComponents


@inject IDoctorApiService _doctorApiService
@inject IBlobStorageService _blobStorageService
@inject IDoctorsRepository _doctorsRepository
@inject UserManager<Patient.Domain.Entities.Actors.Patient> _patientManager
@inject NavigationManager _navigationManager
@inject ProtectedSessionStorage sessionStorage
@inject IMedicineRepository _medicineRepository
@inject IDialogService DialogService
@inject IReportRepository _reportRepository
@inject ISnackbar snackBar
@inject IManageService _manageService


@implements IDisposable


<div class="container position-relative">
    <div class="container px-4  ">
        <div class="row pt-5">
            <div class="justify-content-start align-content-start">
                <NavLink href="/lekarz/raporty">
                    <btn type="button" class="btn back-icon bi-arrow-left"></btn>
                </NavLink>
            </div>
            @if (readingReport)
            {
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            }
            else
            {
                <div class="mx-5">
                    <CascadingValue Value="reportToShow">
                        <Patient.Api.Components.Pages.DoctorPages.Reports.ReportPreviewComponent TokenSource="tokenSource" CurrentPatient="currentPatient"/>
                    </CascadingValue>
                </div>
            }
        </div> 

    </div>       
    <MudPaper Class="pa-8 ma-2" Elevation="3">
        <div class="container px-4">
            <div class="row d-flex mx-5">
                <div class="col text-center mx-5">
                    <btn type="button" class="btn btn-outline-primary btn-custom-outline mt-5" @onclick="HandleShowRecommandationModal">Dodaj rekomendacje</btn>
                </div>
                <div class="col text-center mx-5 py-5">
                    <div class="position-relative">
                        <button class="btn btn-primary btn-custom-primary" type="button" data-toggle="collapse" data-target="#collapseCard" aria-expanded="false" aria-controls="collapseCard">
                            Popros o konsultacje
                        </button>
                        <div class="collapse position-relative" id="collapseCard" style="left: 33.5%; width: 70%;">
                            <div class="card card-body position-absolute" style="z-index: 1000; transform: translateY(0);">
                                <CascadingValue Value="ReportId">
                                    <AskForConsultationComponent TokenSource="tokenSource" />
                                </CascadingValue>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


        </div>
    </MudPaper>
    
    @if (showAddRecommandationModal)
    {
        <CascadingValue Value="addRecommandationModalData">
            <AddRecommandationModal OnClose="CloseModalAddRecommandation" TokenSource="tokenSource"/>
        </CascadingValue>
    }
</div>




@code {

    [Parameter]
    public string ReportId { get; set; }

    private CancellationTokenSource tokenSource = new();
    private ReportForDoctorToShowDto reportToShow = new();
    private Patient.Domain.Entities.Actors.Patient currentPatient = new();


    private bool fileGet;
    private bool readingReport;

    private bool showAddRecommandationModal;
    private bool loading;

    private List<Patient.Domain.Entities.Actors.Doctor> doctors = new();


    //RecommendationModal
    AddRecommandationModalData addRecommandationModalData = new();

    //askForConsultationModal
    private bool showAskForConsultationModal;


    protected async override Task OnInitializedAsync()
    {
        readingReport = true;

        reportToShow = await _doctorApiService.GetReport(ReportId, tokenSource.Token);
        if (reportToShow.FilesPreviewData.Any())
        {
            foreach (var filePreviewData in reportToShow.FilesPreviewData)
            {
                var url = await _blobStorageService.GetBlobSasUrl(filePreviewData.FileUrl, BlobContainerNames.ReportsFiles);
                var fileBase64 = await _manageService.LoadImageBase64(url);
                
            }
        }
        foreach (var doctorId in reportToShow.DoctorsId)
        {
            var doctor = await _doctorsRepository.GetDoctorByIdAsync(doctorId, tokenSource.Token);
            doctors.Add(doctor);
        }
        currentPatient = await _patientManager.FindByIdAsync(reportToShow.PatientId);
        StateHasChanged();
        readingReport = false;

    }



    private async void HandleShowPatient()
    {
        _navigationManager.NavigateTo($"/lekarz/pacjenci?PatientId={currentPatient.Id}&ReportId={reportToShow.Id}");

    }

    private async void HandleShowRecommandationModal()
    {
        var report = await _reportRepository.GetReport(int.Parse(ReportId), tokenSource.Token);
        if (report.MedicalRecommandationId != null)
        {
            snackBar.Add("Raport zawiera już rekomendację", Severity.Error);
            return;
        }
        addRecommandationModalData.CurrentPatient = currentPatient;
        addRecommandationModalData.ReportId = ReportId;
        showAddRecommandationModal = true;

        StateHasChanged();
    }

    private void CloseModalAddRecommandation()
    {
        showAddRecommandationModal = false;
    }

    private void CloseComponentAskForConsul(List<string> chosenDoctorTypes)
    {
        showAskForConsultationModal = false;
    }

   

    //Modal klasy pomocnicze
    public sealed class MedicineToPrescription()
    {
        public int Id;
        public Medicine ChosenMedicine { get; set; } = new();
        public string MedicineDosingDescription { get; set; } = "";
    }

   
    public class AddRecommandationModalData()
    {      
        public Patient.Domain.Entities.Actors.Patient CurrentPatient { get; set; }
        public string ReportId { get; set; }

    }

    public void Dispose()
    {
        tokenSource.Cancel();
        tokenSource.Dispose();
    }

   
}
